<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <title>Chat Empresarial</title>

    
</head>
<body class="bg-dark">
    <div class="container">
        <div class="row">
          
        

            <div class="col-12 text-white p-2 text-center">
                <h1>Chat Empresarial</h1>
            </div>
            <div class="col-12">
                <div class="col-12 mt-1 bg-white p-2" style="height: 500px; overflow:auto; scroll-behavior: smooth;" id="content">
                    
                </div>
                <div class="col-12 bg-white" id="show-writing">

                </div>
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Enter para enviar mensaje" id="message">
                    <button class="btn btn-outline-success" type="button" id="sendMessage">Enviar</button>
                </div>
            </div>

            <div class="col-12 text-end">
                <a href="/auth/logout" type="button" class="btn btn-danger my-2 p-2">Salir del chat</a>
            </div>

            <!-- TOASTS -->
            <input id="messageAlert" type="hidden" value="<%= message %>">
            <input id="user" type="hidden" value="<%= payload.email %>">
            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
                <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true">
                
                </div>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io()
        /** Obtenemos los elementos del DOM */
        let content = document.getElementById('content'),
        message = document.getElementById('message'),
        messageAlert = document.getElementById('messageAlert'),
        showWriting = document.getElementById('show-writing'),
        user = document.getElementById('user'),
        btnSendMessage = document.getElementById('sendMessage'),
        liveToast = document.getElementById('liveToast')


        btnSendMessage.addEventListener('click', (e) => {
            /** Limpiamos la alerta de escribiendo*/
             showWriting.innerHTML = ""
             
             /** Validamos que no envie un dato vacio */
             if(e.target.value.trim() == "") return alert('Ingrese un mensaje por favor')

            /** El cliente envia el mensaje con el boton de enviar */
            socket.emit('add-message', { username:user.value || 'Anónimo', message:message.value })
            message.value = ""
        })

        message.addEventListener('keyup', (e) =>{

            /** Envia con enter key */
            if(e.key.toUpperCase() == "ENTER"){
                if(e.target.value.trim() == "") return alert('Ingrese un mensaje por favor')
                console.log(e.target.value)
                showWriting.innerHTML = ""
                socket.emit('add-message', { username:user.value || 'Anónimo', message:message.value })
                message.value = ""
            }

            /** Emitimos el evento que el usuari oesta escribiendo */
            if(e.key.toUpperCase() != "ENTER") socket.emit( 'writing', { user: user.value } )
        })

        /** EVENTO LOAD */
        addEventListener('load', e => {
            
            if(messageAlert.value){
                liveToast.classList.remove('hide')
                liveToast.classList.add('show')
                liveToast.innerHTML = toast(messageAlert.value, 'bg-success')

                setTimeout(() => {
                    liveToast.classList.remove('show')
                    liveToast.classList.add('hide')
                }, 3000);
            }
            setTimeout(() => {
                content.scrollTop = content.scrollHeight
            }, 1000)
        })

        socket.on('show-message', (messages) => {
            content.innerHTML = ""
            /** Lo seteamos en el content el mensaje */
            content.innerHTML += messageContainer(messages)
            setTimeout(() => {
                content.scrollTop = content.scrollHeight
            }, 1000)
        })

        
        /** MOSTRAR EL TOAST O NOTIFICACION DE TARJETA */
        socket.on('new-connection', message => {
            liveToast.classList.remove('hide')
            liveToast.classList.add('show')
            liveToast.innerHTML = toast(message)

            setTimeout(() => {
                liveToast.classList.remove('show')
                liveToast.classList.add('hide')
            }, 3000);

        })

        /** Mostrar quien esta escribiendo a los demas usuarios */
        socket.on('writing', user => {
            
            showWriting.innerHTML = `
                <figcaption class="blockquote-header text-success">
                    <cite title="Source Title">${user.user}: writing...</cite>
                </figcaption>

                <div class="spinner-grow spinner-grow-sm" role="status">
                </div>
            `

            setTimeout(() =>{
                showWriting.innerHTML = ""
            },3000)
        })

        /** funciones */
        const messageContainer = (messages) =>{
            let allMessages = ""

            for (const message of messages) {
                allMessages +=  `
                <figure class="">
                    <figcaption class="blockquote-header text-success">
                        <cite title="Source Title">${message.username}:</cite>
                    </figcaption>
                    <blockquote class="blockquote mt-0">
                        <p>${message.message}</p>
                    </blockquote>
                </figure>
                `
            }

            return allMessages
        }
    
        const toast = (toastMessage, statusString = "bg-info") => {
            return `
                <div class="toast-header ${statusString} text-dark">
                    <img src="..." class="rounded me-2" alt="...">
                    <strong class="me-auto">Notification</strong>
                    <small>${new Date().toLocaleString()}</small>
                </div>
                <div class="toast-body">
                    ${toastMessage}
                </div>
            `
        }
    </script>
</body>
</html>